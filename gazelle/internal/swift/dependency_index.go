package swift

import (
	"bytes"
	"encoding/json"

	"github.com/bazelbuild/bazel-gazelle/rule"
)

// A DependencyIndex encapsulates the indexes used to lookup Swift modules and products.
type DependencyIndex struct {
	ModuleIndex  ModuleIndex  `json:"modules"`
	ProductIndex ProductIndex `json:"products"`
}

// NewDependencyIndex creates an empty dependency index.
func NewDependencyIndex() *DependencyIndex {
	return &DependencyIndex{
		ModuleIndex:  make(ModuleIndex),
		ProductIndex: make(ProductIndex),
	}
}

// NewDependencyIndexFromJSON creates a dependency index from JSON.
func NewDependencyIndexFromJSON(data []byte) (*DependencyIndex, error) {
	var di DependencyIndex
	if err := json.Unmarshal(data, &di); err != nil {
		return nil, err
	}
	return &di, nil
}

// JSON returns the pretty, JSON representation for the dependency index that is written to disk.
func (di *DependencyIndex) JSON() ([]byte, error) {
	b, err := json.Marshal(di)
	if err != nil {
		return nil, err
	}
	var buf bytes.Buffer
	err = json.Indent(&buf, b, "", "  ")
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// IndexRepoRule indexes any repository rules that are not already included in the module index
// generated by update-repos. In other words, the swift_package repo rules are not indexed here
// because their contents are already included in the module index JSON file.
func (di *DependencyIndex) IndexRepoRule(r *rule.Rule, repoRoot string) error {
	var err error
	switch r.Kind() {
	case HTTPArchiveRuleKind:
		err = di.indexHTTPArchive(r, repoRoot)
	}
	return err
}

func (di *DependencyIndex) indexHTTPArchive(r *rule.Rule, repoRoot string) error {
	ha, err := NewHTTPArchiveFromRule(r, repoRoot)
	if err != nil {
		return err
	}
	if ha == nil {
		return nil
	}
	di.ModuleIndex.Add(ha.Modules...)
	return nil
}

// IndexBazelRepo indexes the modules and products for a Bazel repository.
func (di *DependencyIndex) IndexBazelRepo(bzlRepo *BazelRepo) error {
	var err error
	pi := bzlRepo.PkgInfo
	repoName := bzlRepo.Name

	// Index modules
	modules := make([]*Module, len(pi.Targets))
	for idx, t := range pi.Targets {
		modules[idx], err = NewModuleFromTarget(repoName, t)
		if err != nil {
			return err
		}
	}
	di.ModuleIndex.Add(modules...)

	// Index products
	for _, p := range pi.Products {
		prd, err := NewProductFromPkgInfoProduct(bzlRepo, p)
		if err != nil {
			return err
		}
		di.ProductIndex.Add(prd)
	}

	return nil
}
