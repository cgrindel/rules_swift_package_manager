load("@bazel_gazelle//:def.bzl", "DEFAULT_LANGUAGES", "gazelle", "gazelle_binary")
load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@cgrindel_bazel_starlib//bzlformat:defs.bzl", "bzlformat_missing_pkgs", "bzlformat_pkg")
load("@cgrindel_bazel_starlib//bzltidy:defs.bzl", "tidy", "tidy_all")
load("@cgrindel_bazel_starlib//markdown:defs.bzl", "markdown_pkg")
load("@cgrindel_bazel_starlib//shlib/rules:execute_binary.bzl", "execute_binary")
load("@cgrindel_bazel_starlib//updatesrc:defs.bzl", "updatesrc_update_all")
load(
    "@rules_bazel_integration_test//bazel_integration_test:defs.bzl",
    "integration_test_utils",
)
load("//ci:defs.bzl", "ci_workflow")

# Allow docs to access the extensions.bzl
exports_files(["extensions.bzl"])

# MARK: - Bazel Starlark Lint and Formatting

bzlformat_pkg(name = "bzlformat")

bzlformat_missing_pkgs(
    name = "bzlformat_missing_pkgs",
)

# MARK: - Tidy / Update Source Files

updatesrc_update_all(name = "update_all")

tidy(
    name = "tidy",
    targets = [
        # Remove the child workspace symlinks before doing some of the other
        # operations that my experience infinite symlink expansion errors.
        "@rules_bazel_integration_test//tools:remove_child_wksp_bazel_symlinks",
        "@rules_bazel_integration_test//tools:update_deleted_packages",
        ":bzlformat_missing_pkgs_fix",
        ":update_all",
        ":go_mod_tidy",
        ":update_build_files",
    ],
)

# This is meant to be fast and convenient to quickly update the source files
# with the latest.
tidy(
    name = "update_files",
    targets = [
        ":update_all",
        ":update_build_files",
    ],
)

tidy(
    name = "upgrade_go_deps",
    targets = [
        ":go_get_latest",
        ":go_mod_tidy",
    ],
)

tidy_all(name = "tidy_all")

tidy_all(
    name = "tidy_modified",
    mode = "modified",
)

tidy_all(
    name = "update_swift_packages_for_modified",
    mode = "modified",
    tidy_target = "//:update_swift_packages",
)

tidy_all(
    name = "update_swift_packages_for_all",
    mode = "all",
    tidy_target = "//:update_swift_packages",
)

# MARK: - Gazelle

gazelle_binary(
    name = "gazelle_bin",
    languages = DEFAULT_LANGUAGES + [
        "@bazel_skylib_gazelle_plugin//bzl",
    ],
)

# gazelle:prefix github.com/cgrindel/rules_swift_package_manager
# gazelle:go_naming_convention import
# gazelle:go_naming_convention_external go_default_library
# gazelle:resolve_regexp go ^github.com/bazelbuild/bazel-gazelle/(.*)$ @bazel_gazelle//$1:go_default_library
gazelle(
    name = "update_build_files",
    command = "fix",
    gazelle = ":gazelle_bin",
)

# MARK: - Golang

execute_binary(
    name = "go_mod_tidy",
    arguments = [
        "mod",
        "tidy",
    ],
    binary = "@io_bazel_rules_go//go",
    execute_in_workspace = True,
)

execute_binary(
    name = "go_get_latest",
    arguments = [
        "get",
        "-t",
        "-u",
        "./...",
    ],
    binary = "@io_bazel_rules_go//go",
    execute_in_workspace = True,
)

# MARK: - Markdown

markdown_pkg(name = "markdown")

# MARK: - Integration Test

filegroup(
    name = "all_files",
    srcs = glob(
        ["*"],
        exclude = [
            ".git",
            ".gitignore",
        ],
    ),
    visibility = ["//:__subpackages__"],
)

# Files needed at runtime. Do not include any bzlmod e2e test files here. They
# should only be added to the release archive (//release:archive).
filegroup(
    name = "runtime_files",
    # Include every package that is required by the child workspaces.
    srcs = [
        ":all_files",
        "//ci:all_files",
        "//ci/internal:all_files",
        "//config_settings/bazel/apple_platform_type:all_files",
        "//config_settings/bazel/compilation_mode:all_files",
        "//config_settings/spm/configuration:all_files",
        "//config_settings/spm/platform:all_files",
        "//config_settings/spm/platform_configuration:all_files",
        "//swiftpkg:all_files",
        "//swiftpkg/bzlmod:all_files",
        "//swiftpkg/internal:all_files",
        "//swiftpkg/internal/modulemap_parser:all_files",
        "//tools/swift_deps_index:all_files",
        "//tools/swift_deps_index/cmd:all_files",
        "//tools/swift_deps_index/internal/jsonutils:all_files",
        "//tools/swift_deps_index/internal/pathdistance:all_files",
        "//tools/swift_deps_index/internal/reslog:all_files",
        "//tools/swift_deps_index/internal/spdesc:all_files",
        "//tools/swift_deps_index/internal/spdump:all_files",
        "//tools/swift_deps_index/internal/spreso:all_files",
        "//tools/swift_deps_index/internal/stringslices:all_files",
        "//tools/swift_deps_index/internal/swift:all_files",
        "//tools/swift_deps_index/internal/swiftbin:all_files",
        "//tools/swift_deps_index/internal/swiftcfg:all_files",
        "//tools/swift_deps_index/internal/swiftpkg:all_files",
        "//tools/swift_deps_index/internal/updmarker:all_files",
    ],
    visibility = ["//:__subpackages__"],
)

test_suite(
    name = "smoke_integration_tests",
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = [
        "//bzlmod:e2e_test",
        "//examples:smoke_integration_tests",
        "//release:archive_test",
    ],
    visibility = ["//:__subpackages__"],
)

test_suite(
    name = "all_integration_tests",
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = [
        ":smoke_integration_tests",
        "//examples:all_integration_tests",
    ],
    visibility = ["//:__subpackages__"],
)

# MARK: - CI Workflow

ci_workflow(
    name = "ci_workflow",
    test_params = [
        "//bzlmod:e2e_test_params",
        "//release:archive_test_params",
        "//examples:all_example_test_params",
    ],
    workflow_yml = ".github/workflows/ci.yml",
)

bzl_library(
    name = "extensions",
    srcs = ["extensions.bzl"],
    visibility = ["//visibility:public"],
    deps = ["//swiftpkg/bzlmod:swift_deps"],
)
