#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"

# Remove all build files
find "${script_dir}" \
  -name "BUILD.bazel" \
  -not -path "${script_dir}/third_party/*" \
  -exec rm {} \;

# Remove the SPM build folder
rm -rf "${script_dir}/swift/.build"

# Replace the swift/deps.bzl with no declarations.
cat > "${script_dir}/swift/deps.bzl"  <<-EOF
def swift_dependencies():
    pass
EOF

# Add back a minimal build file at the root
cat > "${script_dir}/BUILD.bazel"  <<-EOF
load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@cgrindel_bazel_starlib//bzltidy:defs.bzl", "tidy")
load("@cgrindel_swift_bazel//swiftpkg:defs.bzl", "swift_update_packages")

tidy(
    name = "tidy",
    targets = [
        "//swift:update_pkgs",
        ":update_build_files",
    ],
)

# MARK: - Gazelle

gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@bazel_skylib_gazelle_plugin//bzl",
        "@cgrindel_swift_bazel//gazelle",
    ],
    visibility = ["//:__subpackages__"],
)

gazelle(
    name = "update_build_files",
    args = [
        "-swift_dependency_index=swift/deps_index.json",
    ],
    gazelle = ":gazelle_bin",
)

EOF

cat > "${script_dir}/swift/BUILD.bazel"  <<-EOF
load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@cgrindel_swift_bazel//swiftpkg:defs.bzl", "swift_update_packages")

# Ignore the Swift build folder
# gazelle:exclude .build

swift_update_packages(
    name = "update_pkgs",
    gazelle = "//:gazelle_bin",
    package_manifest = "swift/Package.swift",
    swift_deps = "swift/deps.bzl",
    swift_deps_index = "swift/deps_index.json",
)

bzl_library(
    name = "deps",
    srcs = ["deps.bzl"],
    visibility = ["//visibility:public"],
    deps = ["@cgrindel_swift_bazel//swiftpkg:defs"],
)
EOF
