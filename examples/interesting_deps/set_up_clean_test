#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"

# Remove all build files
find "${script_dir}" \
  -name "BUILD.bazel" \
  -not -path "${script_dir}/third_party/*" \
  -exec rm {} \;

# Remove the SPM build folder
rm -rf .build

# Add back a minimal build file at the root
cat > "${script_dir}/BUILD.bazel"  <<-EOF
load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@build_bazel_rules_swift//swift:swift.bzl", "swift_binary")
load("@cgrindel_bazel_starlib//bzltidy:defs.bzl", "tidy")

tidy(
    name = "tidy",
    targets = [
        ":update_build_files",
    ],
)

# MARK: - Gazelle

# Ignore the Swift build folder
# gazelle:exclude .build

gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@bazel_skylib_gazelle_plugin//bzl",
        "@rules_swift_package_manager//gazelle",
    ],
)

gazelle(
    name = "update_build_files",
    data = [
        "@swift_deps_info//:swift_deps_index",
    ],
    extra_args = [
        "-swift_dependency_index=\$(location @swift_deps_info//:swift_deps_index)",
    ],
    gazelle = ":gazelle_bin",
)

swift_binary(
    name = "print",
    srcs = ["main.swift"],
    visibility = ["//swift:__subpackages__"],
    deps = [
        "@swiftpkg_cocoalumberjack//:CocoaLumberjackSwiftLogBackend",
        "@swiftpkg_geoswift//:GEOSwift",
        "@swiftpkg_libwebp_xcode//:libwebp",
        "@swiftpkg_opencombine//:OpenCombine",
        "@swiftpkg_swift_log//:Logging",
    ],
)

sh_test(
    name = "simple_test",
    srcs = ["simple_test.sh"],
    data = [":print"],
    deps = ["@bazel_tools//tools/bash/runfiles"],
)
EOF
