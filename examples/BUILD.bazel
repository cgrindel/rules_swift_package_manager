load("@cgrindel_bazel_starlib//bzlformat:defs.bzl", "bzlformat_pkg")
load(
    "@contrib_rules_bazel_integration_test//bazel_integration_test:defs.bzl",
    "bazel_integration_tests",
    "integration_test_utils",
)
load("//:bazel_versions.bzl", "CURRENT_BAZEL_VERSION", "SUPPORTED_BAZEL_VERSIONS")
load(":test_utils.bzl", "test_utils")

bzlformat_pkg(name = "bzlformat")

# Exclude this entire directory from having anything generated by Gazelle. That
# way the test cases won't be fixed by `bazel run //:gazelle` when run in this
# repository.
# gazelle:exclude **

_all_os_test_examples = [
    "http_archive_ext_deps",
    "pkg_manifest_minimal",
    "vapor_example",
]

_macos_test_examples = [
    "ios_sim",
]

_linux_test_examples = []

_all_examples = _all_os_test_examples + _macos_test_examples + _linux_test_examples

sh_binary(
    name = "test_runner",
    testonly = True,
    srcs = ["test_runner.sh"],
    data = [
        "@contrib_rules_bazel_integration_test//tools:create_scratch_dir",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

# MARK: - Integration Tests

[
    bazel_integration_tests(
        name = example + "_test",
        bazel_versions = SUPPORTED_BAZEL_VERSIONS,
        test_runner = ":test_runner",
        workspace_files = integration_test_utils.glob_workspace_files(example) + [
            "//:local_repository_files",
        ],
        workspace_path = example,
    )
    for example in _all_os_test_examples
]

[
    bazel_integration_tests(
        name = example + "_test",
        bazel_versions = SUPPORTED_BAZEL_VERSIONS,
        target_compatible_with = ["@platforms//os:macos"],
        test_runner = ":test_runner",
        workspace_files = integration_test_utils.glob_workspace_files(example) + [
            "//:local_repository_files",
        ],
        workspace_path = example,
    )
    for example in _macos_test_examples
]

[
    bazel_integration_tests(
        name = example + "_test",
        bazel_versions = SUPPORTED_BAZEL_VERSIONS,
        target_compatible_with = ["@platforms//os:linux"],
        test_runner = ":test_runner",
        workspace_files = integration_test_utils.glob_workspace_files(example) + [
            "//:local_repository_files",
        ],
        workspace_path = example,
    )
    for example in _linux_test_examples
]

# MARK: - Test Suites

_test_base_names = [
    example + "_test"
    for example in _all_examples
]

_smoke_test_names = [
    integration_test_utils.bazel_integration_test_name(
        test_base_name,
        CURRENT_BAZEL_VERSION,
    )
    for test_base_name in _test_base_names
]

_all_test_names = test_utils.integration_test_names(
    base_names = _test_base_names,
    versions = SUPPORTED_BAZEL_VERSIONS,
)

test_suite(
    name = "smoke_integration_tests",
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = _smoke_test_names,
    visibility = ["//:__subpackages__"],
)

test_suite(
    name = "all_integration_tests",
    # If you don't apply the test tags to the test suite, the test suite will
    # be found when `bazel test //...` is executed.
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = _all_test_names,
    visibility = ["//:__subpackages__"],
)
