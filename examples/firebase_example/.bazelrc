# Import Shared settings
import %workspace%/../../shared.bazelrc

# Import CI settings.
import %workspace%/../../ci.bazelrc

# Try to import a local.rc file; typically, written by CI
try-import %workspace%/../../local.bazelrc

# NOTE: Puposefully not specifying --copt='-std=c99' as it is applied to 
# objc_library targets that contain Objective-C++ files. Tried using 
# --per_file_copt to exclude .mm files, but did not have success.
# https://stackoverflow.com/questions/40260242/how-to-set-c-standard-version-when-build-with-bazel/43388168#43388168
#
# # Required by firebase-ios-sdk, googleappmeasurement, googledatatransport, googleutilities
# build --copt='-std=c99'
# Required by firebase-ios-sdk, googleappmeasurement, googledatatransport, googleutilities, leveldb
build --cxxopt='-std=gnu++14'

# Firebase SPM support requires `-ObjC` linker option.
# https://github.com/firebase/firebase-ios-sdk/blob/master/SwiftPackageManager.md#requirements
build --linkopt='-ObjC'

# Use the sandbox for rules_xcodeproj-specific builds.  rules_xcodeproj removes
# the sandboxed spawn strategy (--spawn_strategy=remote,worker,local) by
# default to speed up builds. However, to support setting C/C++ language
# standard flags per target
# (https://github.com/cgrindel/rules_swift_package_manager/issues/1079), we
# need to generate multiple {cc,objc}_library targets based upon the type of
# source files (e.g. C, C++, ObjC, ObjC++). When builds occur outside of the
# sandbox, we can experience "error: duplicate interface definition for class
# 'XXX'" errors. Until we can address the underlying error, clients that use
# rules_swift_package_manager with rules_xcodeproj may need to use sandbox
# builds.
common:rules_xcodeproj --spawn_strategy=remote,worker,sandboxed,local
