"""Implementation for `swift_deps` bzlmod extension."""

load("//swiftpkg/internal:deps_indexes.bzl", "deps_indexes")
load("//swiftpkg/internal:local_swift_package.bzl", "local_swift_package")
load("//swiftpkg/internal:swift_package.bzl", "swift_package")

# MARK: - swift_deps bzlmod Extension

def _declare_pkg_from_package(package, deps_index_label):
    if package.remote_pkg != None:
        swift_package(
            name = package.name,
            bazel_package_name = package.name,
            commit = package.remote_pkg.commit,
            remote = package.remote_pkg.remote,
            dependencies_index = deps_index_label,
        )
    elif package.local_pkg != None:
        local_swift_package(
            name = package.name,
            bazel_package_name = package.name,
            path = package.local_pkg.path,
            dependencies_index = deps_index_label,
        )
    else:
        fail("Found package '{}' without a remote or local.".format(
            package.identity,
        ))

def _declare_pkgs_from_file(module_ctx, from_file):
    index_json = module_ctx.read(from_file.deps_index)
    deps_index = deps_indexes.new_from_json(index_json)
    for package in deps_index.packages_by_id.values():
        _declare_pkg_from_package(package, from_file.deps_index)

def _swift_deps_impl(module_ctx):
    for mod in module_ctx.modules:
        for from_file in mod.tags.from_file:
            _declare_pkgs_from_file(module_ctx, from_file)

_from_file_tag = tag_class(
    attrs = {
        "deps_index": attr.label(
            mandatory = True,
            doc = "A `swift_deps_index.json`.",
        ),
    },
    doc = "Load Swift packages from a file generated by the Gazelle extension.",
)

swift_deps = module_extension(
    implementation = _swift_deps_impl,
    tag_classes = {
        "from_file": _from_file_tag,
    },
)
