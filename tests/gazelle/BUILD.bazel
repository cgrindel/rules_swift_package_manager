load("@bazel_gazelle//:def.bzl", "gazelle_binary", "gazelle_generation_test")
load("@cgrindel_bazel_starlib//bzlformat:defs.bzl", "bzlformat_pkg")
load("@cgrindel_bazel_starlib//shlib/rules:execute_binary.bzl", "execute_binary")
load(":test_infos.bzl", "test_infos")

bzlformat_pkg(name = "bzlformat")

# Exclude this entire directory from having anything generated by Gazelle. That
# way the test cases won't be fixed by `bazel run //:gazelle` when run in this
# repository.
# gazelle:exclude **

gazelle_binary(
    name = "swift_gazelle",
    languages = ["//gazelle"],
    visibility = ["//visibility:private"],
)

execute_binary(
    name = "swift_gazelle_gen_from_pkg_manifest",
    # arguments = ["--gen_from_pkg_manifest"],
    arguments = ["-gen_from_pkg_manifest"],
    binary = ":swift_gazelle",
)

_DEFAULT_TEST_INFO = test_infos.new(
    timeout = 2,
    binary = ":swift_gazelle",
    local = False,
)

_SWIFT_PKG_TEST_INFO = test_infos.new(
    # CI tests run on low power machines. Need to give it plenty of time to run.
    timeout = 10,
    binary = ":swift_gazelle_gen_from_pkg_manifest",
    local = True,
)

_GAZELLE_BINARY = {
    "MySwiftPackage": _SWIFT_PKG_TEST_INFO,
}

[gazelle_generation_test(
    # Name the test the path to the directory containing the WORKSPACE file.
    name = file[0:-len("/WORKSPACE")],
    gazelle_binary = _GAZELLE_BINARY.get(
        file[0:-len("/WORKSPACE")],
        default = _DEFAULT_TEST_INFO,
    ).binary,
    gazelle_timeout_seconds = _GAZELLE_BINARY.get(
        file[0:-len("/WORKSPACE")],
        default = _DEFAULT_TEST_INFO,
    ).timeout,
    # Some of the tests require the use of the Swift command. These need to be run outside of the sandbox.
    local = _GAZELLE_BINARY.get(
        file[0:-len("/WORKSPACE")],
        default = _DEFAULT_TEST_INFO,
    ).local,
    test_data = glob(
        include = [file[0:-len("/WORKSPACE")] + "/**"],
    ),
) for file in glob(
    include = ["**/WORKSPACE"],
)]
